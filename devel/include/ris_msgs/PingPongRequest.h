// Generated by gencpp from file ris_msgs/PingPongRequest.msg
// DO NOT EDIT!


#ifndef RIS_MSGS_MESSAGE_PINGPONGREQUEST_H
#define RIS_MSGS_MESSAGE_PINGPONGREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ris_msgs
{
template <class ContainerAllocator>
struct PingPongRequest_
{
  typedef PingPongRequest_<ContainerAllocator> Type;

  PingPongRequest_()
    : input()  {
    }
  PingPongRequest_(const ContainerAllocator& _alloc)
    : input(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _input_type;
  _input_type input;





  typedef boost::shared_ptr< ::ris_msgs::PingPongRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ris_msgs::PingPongRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PingPongRequest_

typedef ::ris_msgs::PingPongRequest_<std::allocator<void> > PingPongRequest;

typedef boost::shared_ptr< ::ris_msgs::PingPongRequest > PingPongRequestPtr;
typedef boost::shared_ptr< ::ris_msgs::PingPongRequest const> PingPongRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ris_msgs::PingPongRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ris_msgs::PingPongRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ris_msgs::PingPongRequest_<ContainerAllocator1> & lhs, const ::ris_msgs::PingPongRequest_<ContainerAllocator2> & rhs)
{
  return lhs.input == rhs.input;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ris_msgs::PingPongRequest_<ContainerAllocator1> & lhs, const ::ris_msgs::PingPongRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ris_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ris_msgs::PingPongRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ris_msgs::PingPongRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ris_msgs::PingPongRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ris_msgs::PingPongRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ris_msgs::PingPongRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ris_msgs::PingPongRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ris_msgs::PingPongRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39e92f1778057359c64c7b8a7d7b19de";
  }

  static const char* value(const ::ris_msgs::PingPongRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39e92f1778057359ULL;
  static const uint64_t static_value2 = 0xc64c7b8a7d7b19deULL;
};

template<class ContainerAllocator>
struct DataType< ::ris_msgs::PingPongRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ris_msgs/PingPongRequest";
  }

  static const char* value(const ::ris_msgs::PingPongRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ris_msgs::PingPongRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string input\n"
;
  }

  static const char* value(const ::ris_msgs::PingPongRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ris_msgs::PingPongRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.input);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PingPongRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ris_msgs::PingPongRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ris_msgs::PingPongRequest_<ContainerAllocator>& v)
  {
    s << indent << "input: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.input);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIS_MSGS_MESSAGE_PINGPONGREQUEST_H
